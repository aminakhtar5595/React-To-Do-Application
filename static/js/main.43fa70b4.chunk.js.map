{"version":3,"sources":["components/Note.js","App.js","serviceWorker.js","index.js"],"names":["Note","react_default","a","createElement","className","onClick","this","props","deleteMethod","text","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","event","key","state","noteText","notes","setState","target","value","push","textInput","focus","index","notesArr","splice","_this2","map","val","components_Note","deleteNote","addNote","bind","type","placeholder","ref","input","onChange","updateNoteText","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAaeA,mLARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASC,KAAKC,MAAMC,cACzCF,KAAKC,MAAME,aALCC,aC8DJC,qBA1Db,SAAAA,EAAYJ,GAAO,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMC,KAqBVW,eAAiB,SAACC,GACZA,EAAMC,KArBRR,EAAKS,MAAQ,CACbC,SAAU,GACVC,MAAO,IAJUX,8EAQFU,GACbhB,KAAKkB,SAAS,CAAEF,SAAUA,EAASG,OAAOC,0CAIZ,KAAxBpB,KAAKe,MAAMC,WAEAhB,KAAKe,MAAME,MACjBI,KAAKrB,KAAKe,MAAMC,UACzBhB,KAAKkB,SAAS,CAAEF,SAAU,KAC1BhB,KAAKsB,UAAUC,4CAUZC,GACT,IAAIC,EAAWzB,KAAKe,MAAME,MAC1BQ,EAASC,OAAOF,EAAO,GACvBxB,KAAKkB,SAAS,CAAED,MAAOQ,qCAId,IAAAE,EAAA3B,KACHiB,EAAQjB,KAAKe,MAAME,MAAMW,IAAI,SAACC,EAAKf,GACrC,OAAOnB,EAAAC,EAAAC,cAACiC,EAAD,CAAMhB,IAAKA,EAAKX,KAAM0B,EAC7B3B,aAAe,kBAAMyB,EAAKI,WAAWjB,QAGvC,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACrBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,2BACCmB,EACDtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,QAASC,KAAKgC,QAAQC,KAAKjC,OAAhD,KACAL,EAAAC,EAAAC,cAAA,SAAOqC,KAAK,OAAOC,YAAY,kBAAkBC,IAAM,SAACC,GAAWV,EAAKL,UAAYe,GACpFvC,UAAY,YACZsB,MAASpB,KAAKe,MAAMC,SACpBsB,SAAY,SAAAtB,GAAQ,OAAIW,EAAKY,eAAevB,IAC5CwB,WAAcxC,KAAKY,eAAeqB,KAAKjC,gBApDrBI,cCQEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.43fa70b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Note extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"note\" onClick={this.props.deleteMethod}>\r\n      {this.props.text}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Note;\r\n","import React, { Component } from 'react';\r\nimport Note from './components/Note';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    noteText: '',\r\n    notes: [],\r\n    }\r\n    }\r\n\r\n    updateNoteText(noteText) {\r\n      this.setState({ noteText: noteText.target.value })\r\n      }\r\n\r\n      addNote() {\r\n        if (this.state.noteText === '') {return}\r\n        \r\n        let notesArr = this.state.notes;\r\n        notesArr.push(this.state.noteText);\r\n        this.setState({ noteText: '' });\r\n        this.textInput.focus();\r\n        }\r\n        \r\n\r\nhandleKeyPress = (event) => {\r\n  if (event.key === 'Enter') {\r\n\r\n  }\r\n}\r\n\r\ndeleteNote(index) {\r\n  let notesArr = this.state.notes;\r\n  notesArr.splice(index, 1);\r\n  this.setState({ notes: notesArr })\r\n  }\r\n  \r\n\r\n  render() {\r\n    let notes = this.state.notes.map((val, key) => {\r\n      return <Note key={key} text={val}\r\n      deleteMethod={ () => this.deleteNote(key) } />\r\n      })\r\n      \r\n    return (\r\n      <div className=\"container\">\r\n<div className=\"header\">React To Do Application</div>\r\n{notes}\r\n<div className=\"btn\" onClick={this.addNote.bind(this)}>+</div>\r\n<input type=\"text\" placeholder=\"Enter something\" ref={((input) => {this.textInput = input})} \r\nclassName = \"textInput\"\r\nvalue = {this.state.noteText}\r\nonChange = {noteText => this.updateNoteText(noteText)}\r\nonKeyPress = {this.handleKeyPress.bind(this)}\r\n\r\n/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}